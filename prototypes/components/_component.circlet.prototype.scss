///-----------------------------------------------------------------------------
///  COMPONENT: CIRCLET
///-----------------------------------------------------------------------------
///
///  Circle container with points positioned along its perimeter.
///
///  @link https://codepen.io/LucaRosaldi/pen/qPbeXW?editors=1100
///

///
/// @var    {Map}  Element settings.
/// @access public
///
$c-circlet: () !default;

///
/// @var    {Map}
/// @access private
///
$_config: map-merge( (

  "parent-size": 15em,              /// Diameter of circlet
  "parent-border": true,            /// Should the circlet have a band highlighting the perimeter?

  "points-number": 5,               /// Number of points within the circlet
  "points-size": 4em,               /// Size of each one of the points
  "points-link-border": 2px solid,  ///

  "band-width": 2px,        /// Thickness of the band’s border
  "band-style": solid,      /// Style of the band’s border

  "rev-time": 90s,          /// Time for an item to complete a full revolution
  "rev-clockwise": false,   /// Should items revolve clockwise? (false = anticlockwise)

), $c-circlet );


@if ( ui-load( "components", "circlet" ) == true ) {
/*-----------------------------------------------------------------------------*
 *  COMPONENT: CIRCLET
 *-----------------------------------------------------------------------------*
 *
 *  Circle container with children positioned along its perimeter.
 *
 */

///
/// @access private
///
$_size: map-get( $_config, "parent-size" );
$_points_n: map-get( $_config, "points-number" );
$_points_s: map-get( $_config, "points-size" );
$_band: map-get( $_config, "band" );
$_band_w: map-get( $_config, "band-width" );
$_band_s: map-get( $_config, "band-style" );
$_rev_time: map-get( $_config, "rev-time" );
$_rev_cw: map-get( $_config, "rev-clockwise" );
$_angle: ( 360deg / $_points_n );
$_offset: if( $_rev_cw == false, 360deg, -360deg );

///
/// @block        Circlet
/// @description  Default circlet element.
///
/// 1. make the first item appear on the top of the circle
/// 2. this is the black magic that makes it possible. Basically, we rotate and
///    translate each item along the circlet circumference, and then rotate each
///    one in the opposite direction to preserve the horizontal axis.
///
%c-circlet {
  position: relative;

  width:  $_size;
  height: $_size;
  margin: $_points_s / 2;
  padding: 0;

  @if ( $_band ) {
    border: $_band_w $_band_s;
  }

  border-radius: 50%;
  animation: $_rev_time linear infinite both paused circlet-rotate;
}
@keyframes circlet-rotate {
  to {
    transform: rotate( $_offset );
  }
}

  %c-circlet__item {
    display: flex;
    align-items: center;
    justify-content: center;

    position: absolute;
    top: 50%; left: 50%;
    width: $_points_s;
    height: $_points_s;
    margin: -( $_points_s / 2 );
    list-style: none;

    &::before {
      content: "";
      position: absolute;
      z-index: -1;
      right: 50%; top: 50%;
      width: $_size / 2;
      height: 0;

      @if ( $_band ) {
        border-top: $_band_w $_band_s;
        margin-top: -( $_band_w / 2 );
      }
    }

    /// [2] ///
    @for $i from 1 to ( $_points_n + 1 ) {

      $rotate: $_offset + ( ( 360deg / $_points_n ) * $i );
      $rotate-back: $rotate * -1;
      $revolve-back: ( $_offset + $rotate ) * -1;

      &:nth-of-type( #{$i} ) {
        transform: rotate( $rotate ) translate( $_size / 2  ) rotate( $rotate-back );
        animation: inherit;
        animation-name: circlet-rotate-child-#{$i};
      }

      &:nth-of-type( #{$i} )::before {
        transform: rotate( ( $_angle * $i ) );
        transform-origin: right;
        animation: inherit;
        animation-name: circlet-rotate-child-border-#{$i};
      }

      @keyframes circlet-rotate-child-#{$i} {
        to {
          transform: rotate( $rotate ) translate( $_size / 2 ) rotate( $revolve-back );
        }
      }

      @keyframes circlet-rotate-child-border-#{$i} {
        to {
          transform: rotate( $_offset + ( ( 360deg / $_points_n ) * $i ) );
        }
      }

    }

  }

%c-circlet--animated {
  animation-play-state: running;
}

} // enabled
