///-----------------------------------------------------------------------------
///  COMPONENT: BUTTON
///-----------------------------------------------------------------------------
///
///  Clickable call-to-action elements.
///

///
/// @var    {Map}  Element settings.
/// @access public
///
$c-button: () !default;

///
/// @var    {Map}
/// @access private
///
$_config: map-extend( (

  padding: 0.6em 1.4em,

  font-family: null,
  font-size: null,
  font-weight: null,
  line-height: null,
  letter-spacing: null,
  text-transform: null,

  border: null,
  background: null,
  color: null,
  box-shadow: null,

  border-radius: 4px,

  "colors": (

    "primary": (
      color: $white,
      background: ui-color( "primary" ),
      border: null,
      box-shadow: null,
    ),
    "primary--hover": (
      color: $white,
      background: lighten( ui-color( "primary" ), 10 ),
      border: null,
      box-shadow: null,
    ),

  ),

), $c-button );


@if ( ui-load( "components", "button" ) == true ) {
/*-----------------------------------------------------------------------------*
 *  COMPONENT: BUTTON
 *-----------------------------------------------------------------------------*
 *
 *  Clickable call-to-action elements.
 *
 */

///
/// @block        Button
/// @description  Default Button block.
///
/// [1] reset transition to avoid delay on nested buttons
/// [2] disable click on child elements to avoid js conflicts
///
%c-button {
  @extend %transition !optional;

  display: flex;
  justify-content: center;
  align-items: center;

  position: relative;
  padding: map-get( $_config, "padding" );

  font-family: map-get( $_config, "font-family" );
  font-size: map-get( $_config, "font-size" );
  font-weight: map-get( $_config, "font-weight" );
  line-height: map-get( $_config, "line-height" );
  letter-spacing: map-get( $_config, "letter-spacing" );
  text-transform: map-get( $_config, "text-transform" );
  text-align: center;

  color: map-get( $_config, "color" );
  background: map-get( $_config, "background" );
  border: map-get( $_config, "border" );
  box-shadow: map-get( $_config, "box-shadow" );

  border-radius: map-get( $_config, "border-radius" );

  &:disabled {
    pointer-events: none;
    opacity: .75;
  }

  * {
    transition: auto;     /// [1] ///
    pointer-events: none; /// [2] ///
  }
}

///
/// @modifier     Button Hard
/// @description  Button with hard edges.
///
%c-button--hard {
  border-radius: 0;
}

///
/// @modifier     Button Pill
/// @description  Button with rounded corners.
///
%c-button--pill {
  border-radius: 9999px;
}

///
/// @modifier     Button Label
/// @description  Pill-shaped button which is normally used for labeling things.
///
%c-button--label {
  display: inline-flex;

  padding: 0 0.75ch;

  line-height: 1.5em;
  white-space: nowrap;

  border-radius: 1.5em;
}

///
/// @modifier     Button Badge
/// @description  Circle-shaped button.
///
%c-button--badge {
  display: inline-flex;

  width: 1.5em;
  height: 1.5em;
  padding: 0;

  line-height: 1;
  white-space: nowrap;
  text-align: center;
  font-variant-numeric: tabular-nums;

  border-radius: 100%;
}

///
/// @block        Button Stateful
/// @description  Button with multiple states which change with an animation.
///
%c-button--stateful {
  @extend %o-button !optional;

  flex-direction: column;

  overflow: hidden;
  padding: 0;
  animation-play-state: paused;
}

  ///
  /// @element      Button Stateful Element
  /// @description  Container for a specific state.
  ///
  /// [1] remove button background because it is already set on parent
  ///
  %c-button--stateful__element {
    @extend %transition !optional;
    @extend %o-button !optional;

    width: 100%;
    background: transparent; /// [1] ///
  }

  ///
  /// @modifier     Button Stateful Element [State]
  /// @description  Containers for different states.
  ///
  /// [1] icon indicating current state
  ///
  %c-button--stateful__element--loading,
  %c-button--stateful__element--success,
  %c-button--stateful__element--error {
    position: absolute;
    left: 0; top: 100%;
    width: 100%; height: 100%;

    pointer-events: none;
    cursor: default;

    /// [1] ///
    &::before {
      width: 1.5em;
      height: 1.5em;
      margin: 0.25em;
    }
  }

  ///
  /// @modifier     Button Stateful Element Loading
  /// @description  Container for loading state.
  ///
  %c-button--stateful__element--loading {
    opacity: 0.75;
    &::before {
      content: url( "data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 18 18' width='100%' height='100%'><path d='M9 13.5c-2.49 0-4.5-2.01-4.5-4.5S6.51 4.5 9 4.5c1.24 0 2.36.52 3.17 1.33L10 8h5V3l-1.76 1.76A6.003 6.003 0 0 0 9 3C5.69 3 3.01 5.69 3.01 9S5.69 15 9 15a5.98 5.98 0 0 0 5.9-5h-1.52c-.46 2-2.24 3.5-4.38 3.5z'/></svg>" );
      animation: spin 1000ms linear infinite;
    }
    &::after {
      content: attr( data-button-state-loading );
    }
  }

  ///
  /// @modifier     Button Stateful Element Error
  /// @description  Container for error state.
  ///
  %c-button--stateful__element--error {
    &::before {
      content: url( "data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 18 18' width='100%' height='100%'><path d='M14.53 4.53l-1.06-1.06L9 7.94 4.53 3.47 3.47 4.53 7.94 9l-4.47 4.47 1.06 1.06L9 10.06l4.47 4.47 1.06-1.06L10.06 9z'/></svg>" );
    }
    &::after {
      content: attr( data-button-state-error );
    }
  }

  ///
  /// @modifier     Button Stateful Element Success
  /// @description  Container for success state.
  ///
  %c-button--stateful__element--success {
    &::before {
      content: url( "data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 36 36' width='100%' height='100%'><path d='M13.5 24.26L7.24 18l-2.12 2.12 8.38 8.38 18-18-2.12-2.12z'/></svg>" );
    }
    &::after {
      content: attr( data-button-state-success );
    }
  }

///
/// @modifier     Button Stateful Loading
/// @description  Button in loading state.
///
%c-button--stateful--loading {
  %c-button--stateful__state--default,
  %c-button--stateful__state--loading {
    transform: translateY( -100% );
  }
}

///
/// @modifier     Button Stateful Success
/// @description  Button in success state.
///
%c-button--stateful--success {
  %c-button--stateful__state--default,
  %c-button--stateful__state--success {
    transform: translateY( -100% );
  }
}

///
/// @modifier     Button Stateful Error
/// @description  Button in error state.
///
%c-button--stateful--error {
  %c-button--stateful__state--default,
  %c-button--stateful__state--error {
    transform: translateY( -100% );
  }
}

///
/// @modifier     Button [color]
/// @description  Button variant for [color].
///
@each $_name, $_props in map-get( $_config, "colors" ) {

  %c-button--#{$_name} {
    color: map-get( $_props, "color" );
    background: map-get( $_props, "background-color" );
    border: map-get( $_props, "border-color" );
    box-shadow: map-get( $_props, "box-shadow" );
  }

}

} // ui-load()
